service: backend-softtek-challenge
frameworkVersion: '4'

provider:
    name: aws
    runtime: nodejs20.x
    region: us-east-2
    stage: ${opt:stage, 'dev'}
    logRetentionInDays: 1
    tracing:
        lambda: true
        apiGateway: true

    vpc:
        securityGroupIds:
            - Fn::GetAtt: [MyLambdaSG, GroupId]
        subnetIds:
            - Ref: MyPrivateSubnet1
            - Ref: MyPrivateSubnet2

    environment:
        NASA_API_KEY: ${env:NASA_API_KEY_${opt:stage, 'dev'}}
        NASA_APOD_URL: ${env:NASA_APOD_URL_${opt:stage, 'dev'}}
        SWAPI_PEOPLE_URL: ${env:SWAPI_PEOPLE_URL_${opt:stage, 'dev'}}
        HISTORY_TABLE: ${env:HISTORY_TABLE_${opt:stage, 'dev'}}
        IS_OFFLINE: ${env:IS_OFFLINE_${opt:stage, 'dev'}}
        STARWARS_PLANETS_TABLE: ${env:STARWARS_PLANETS_TABLE_${opt:stage, 'dev'}}
        REDIS_HOST: 'fusionados-redis-prod.wizndr.0001.use2.cache.amazonaws.com'
        REDIS_PORT: '6379'
        DYNAMODB_LOCAL_SERVER: 'http://localhost:8000'
        CACHE_TTL_SECONDS: ${env:CACHE_TTL_SECONDS_${opt:stage, 'dev'}}
        LOG_LEVEL: ${env:LOG_LEVEL_${opt:stage, 'dev'}}
        COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID_${opt:stage, 'dev'}}
        COGNITO_APP_CLIENT_ID: ${env:COGNITO_APP_CLIENT_ID_${opt:stage, 'dev'}}

    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:PutItem
                      - dynamodb:GetItem
                      - dynamodb:Query
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:Scan
                  Resource:
                      - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}'
                      - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STARWARS_PLANETS_TABLE}'

                - Effect: Allow
                  Action:
                      - xray:PutTraceSegments
                      - xray:PutTelemetryRecords
                  Resource:
                      - 'arn:aws:xray:${self:provider.region}:${aws:accountId}:*'
                - Effect: Allow
                  Action:
                      - cognito-idp:*
                  Resource:
                      - arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${env:COGNITO_USER_POOL_ID_${opt:stage, 'dev'}}

functions:
    getPeople:
        handler: src/interface/lambda/handlers/swapiPeopleHandler.getPeopleHandler
        events:
            - http:
                  path: fusionados/people
                  method: get
                  cors: true

    getPersonById:
        handler: src/interface/lambda/handlers/swapiPeopleHandler.getPersonByIdHandler
        events:
            - http:
                  path: fusionados/people/{id}
                  method: get
                  cors: true

    getHistory:
        handler: src/interface/lambda/handlers/historyHandler.getHistoryHandler
        events:
            - http:
                  path: historial
                  method: get
                  cors: true
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
    createPlanet:
        handler: src/interface/lambda/handlers/createPlanetHandler.createPlanetHandler
        events:
            - http:
                  path: starwars/planets
                  method: post
                  cors: true
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
    getAllPlanets:
        handler: src/interface/lambda/handlers/getAllPlanetsHandler.getAllPlanetsHandler
        events:
            - http:
                  path: starwars/planets
                  method: get
                  cors: true

plugins:
    - serverless-offline
    - '@jimdo/serverless-dotenv'
    - serverless-dynamodb-local

resources:
    Resources:
        MyVPC:
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: '10.0.0.0/16'
                EnableDnsHostnames: true
                EnableDnsSupport: true
                Tags:
                    - Key: Name
                      Value: 'myServerlessVPC-${self:provider.stage}'

        MyInternetGateway:
            Type: AWS::EC2::InternetGateway
            Properties:
                Tags:
                    - Key: Name
                      Value: 'myInternetGateway-${self:provider.stage}'

        MyVPCGatewayAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                VpcId: !Ref MyVPC
                InternetGatewayId: !Ref MyInternetGateway

        MyPublicSubnet1:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref MyVPC
                AvailabilityZone: 'us-east-2a'
                CidrBlock: '10.0.1.0/24'
                MapPublicIpOnLaunch: true
                Tags:
                    - Key: Name
                      Value: 'myPublicSubnet1-${self:provider.stage}'

        MyPublicSubnet2:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref MyVPC
                AvailabilityZone: 'us-east-2b'
                CidrBlock: '10.0.2.0/24'
                MapPublicIpOnLaunch: true
                Tags:
                    - Key: Name
                      Value: 'myPublicSubnet2-${self:provider.stage}'

        MyPublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId: !Ref MyVPC
                Tags:
                    - Key: Name
                      Value: 'myPublicRouteTable-${self:provider.stage}'

        MyPublicRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId: !Ref MyPublicRouteTable
                DestinationCidrBlock: '0.0.0.0/0'
                GatewayId: !Ref MyInternetGateway

        MyPublicSubnet1RouteTableAssoc:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId: !Ref MyPublicSubnet1
                RouteTableId: !Ref MyPublicRouteTable

        MyPublicSubnet2RouteTableAssoc:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId: !Ref MyPublicSubnet2
                RouteTableId: !Ref MyPublicRouteTable

        MyNatEIP:
            Type: AWS::EC2::EIP
            Properties:
                Domain: vpc

        MyNatGateway:
            Type: AWS::EC2::NatGateway
            Properties:
                AllocationId: !GetAtt MyNatEIP.AllocationId
                SubnetId: !Ref MyPublicSubnet1
                Tags:
                    - Key: Name
                      Value: 'myNatGateway-${self:provider.stage}'

        MyPrivateSubnet1:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref MyVPC
                AvailabilityZone: 'us-east-2a'
                CidrBlock: '10.0.101.0/24'
                MapPublicIpOnLaunch: false
                Tags:
                    - Key: Name
                      Value: 'myPrivateSubnet1-${self:provider.stage}'

        MyPrivateSubnet2:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref MyVPC
                AvailabilityZone: 'us-east-2b'
                CidrBlock: '10.0.102.0/24'
                MapPublicIpOnLaunch: false
                Tags:
                    - Key: Name
                      Value: 'myPrivateSubnet2-${self:provider.stage}'

        MyPrivateRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId: !Ref MyVPC
                Tags:
                    - Key: Name
                      Value: 'myPrivateRouteTable-${self:provider.stage}'

        MyPrivateRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId: !Ref MyPrivateRouteTable
                DestinationCidrBlock: '0.0.0.0/0'
                NatGatewayId: !Ref MyNatGateway

        MyPrivateSubnet1RouteTableAssoc:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId: !Ref MyPrivateSubnet1
                RouteTableId: !Ref MyPrivateRouteTable

        MyPrivateSubnet2RouteTableAssoc:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId: !Ref MyPrivateSubnet2
                RouteTableId: !Ref MyPrivateRouteTable

        MyLambdaSG:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: 'Security group for serverless Lambdas'
                VpcId: !Ref MyVPC
                SecurityGroupIngress:
                SecurityGroupEgress:
                    - IpProtocol: -1
                      CidrIp: 0.0.0.0/0
                Tags:
                    - Key: Name
                      Value: 'myLambdaSG-${self:provider.stage}'

        MyRedisSG:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: 'Security group for Redis ElastiCache'
                VpcId: !Ref MyVPC
                SecurityGroupIngress:
                    - IpProtocol: tcp
                      FromPort: 6379
                      ToPort: 6379
                      SourceSecurityGroupId: !GetAtt MyLambdaSG.GroupId
                SecurityGroupEgress:
                    - IpProtocol: -1
                      CidrIp: 0.0.0.0/0
                Tags:
                    - Key: Name
                      Value: 'myRedisSG-${self:provider.stage}'

        MyRedisSubnetGroup:
            Type: AWS::ElastiCache::SubnetGroup
            Properties:
                Description: 'Subnet Group for my Redis cluster'
                SubnetIds:
                    - !Ref MyPrivateSubnet1
                    - !Ref MyPrivateSubnet2

        MyRedisCache:
            Type: AWS::ElastiCache::CacheCluster
            Properties:
                Engine: 'redis'
                CacheNodeType: 'cache.t3.micro'
                NumCacheNodes: 1
                ClusterName: 'fusionados-redis-${self:provider.stage}'
                VpcSecurityGroupIds:
                    - !GetAtt MyRedisSG.GroupId
                CacheSubnetGroupName: !Ref MyRedisSubnetGroup

        FusionadosHistoryTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.HISTORY_TABLE}
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE

        StarWarsPlanetsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.STARWARS_PLANETS_TABLE}
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE
        ApiGatewayAuthorizer:
            Type: AWS::ApiGateway::Authorizer
            Properties:
                Name: CognitoAuthorizerWithSecret
                Type: COGNITO_USER_POOLS
                IdentitySource: method.request.header.Authorization
                RestApiId:
                    Ref: ApiGatewayRestApi
                ProviderARNs:
                    - arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${env:COGNITO_USER_POOL_ID_${opt:stage, 'dev'}}

    Outputs:
        RedisEndpoint:
            Description: 'Endpoint of the Redis cache'
            Value: !GetAtt MyRedisCache.RedisEndpoint.Address

custom:
    dynamodb:
        stages:
            - dev
        start:
            host: localhost
            port: 8000
            noStart: true
            migrate: true

    esbuild:
        bundle: true
        minify: false
        sourcemap: true
        target: 'node20'
        platform: 'node'
        concurrency: 10
